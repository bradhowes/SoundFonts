// Copyright Â© 2021 Brad Howes. All rights reserved.

#include <iostream>
#include <iomanip>

#include "DSP.hpp"
#include "MIDI/ValueTransformer.hpp"
#include "DSPGenerators.hpp"

using namespace SF2::DSP;
using namespace SF2::DSP::Tables;
using namespace SF2::MIDI;

Generator::Generator(std::ostream& os) {
    os << std::fixed;
    os << std::setprecision(16); // should be OK for 64-bit doubles
    os << std::showpoint;

    os << "// This file is auto-generated by the DSPGenerators program\n";
    os << "// See the DSPGenerators/DSPGenerators.cc file\n\n";
    os << "#include \"DSP.hpp\"\n";
    os << "#include \"MIDI/ValueTransformer.hpp\"\n\n";
    os << "using namespace SF2::DSP;\n";
    os << "using namespace SF2::DSP::Tables;\n";
    os << "using namespace SF2::MIDI;\n\n";

    // Lookup tables
    generate<PanLookup>(os, "PanLookup");
    generate<SineLookup>(os, "SineLookup");
    generate<CentsFrequencyLookup>(os, "CentsFrequencyLookup");
    generate<CentsPartialLookup>(os, "CentsPartialLookup");
    generate<AttenuationLookup>(os, "AttenuationLookup");
    generate<GainLookup>(os, "GainLookup");

    // Unipolar transforms
    generateTransform(os, ValueTransformer::positiveLinear, "positiveLinear", false);
    generateTransform(os, ValueTransformer::negativeLinear, "negativeLinear", false);
    generateTransform(os, ValueTransformer::positiveConcave, "positiveConcave", false);
    generateTransform(os, ValueTransformer::negativeConcave, "negativeConcave", false);
    generateTransform(os, ValueTransformer::positiveConvex, "positiveConvex", false);
    generateTransform(os, ValueTransformer::negativeConvex, "negativeConvex", false);
    generateTransform(os, ValueTransformer::positiveSwitched, "positiveSwitched", false);
    generateTransform(os, ValueTransformer::negativeSwitched, "negativeSwitched", false);

    // Bipolar transforms
    generateTransform(os, ValueTransformer::positiveLinear, "positiveLinear", true);
    generateTransform(os, ValueTransformer::negativeLinear, "negativeLinear", true);
    generateTransform(os, ValueTransformer::positiveConcave, "positiveConcave", true);
    generateTransform(os, ValueTransformer::negativeConcave, "negativeConcave", true);
    generateTransform(os, ValueTransformer::positiveConvex, "positiveConvex", true);
    generateTransform(os, ValueTransformer::negativeConvex, "negativeConvex", true);
    generateTransform(os, ValueTransformer::positiveSwitched, "positiveSwitched", true);
    generateTransform(os, ValueTransformer::negativeSwitched, "negativeSwitched", true);

    // Cubic4thOrder weights table
    os << "const Tables::Cubic4thOrder::WeightsArray Tables::Cubic4thOrder::weights_ = {\n";
    for (auto index = 0; index < Tables::Cubic4thOrder::TableSize; ++index) {
        auto x = double(index) / double(Tables::Cubic4thOrder::TableSize);
        auto x_05 = 0.5 * x;
        auto x2 = x * x;
        auto x3 = x2 * x;
        auto x3_05 = 0.5 * x3;
        auto x3_15 = 1.5 * x3;
        os << -x3_05 +       x2 - x_05        << ", ";
        os <<  x3_15 - 2.5 * x2         + 1.0 << ", ";
        os << -x3_15 + 2.0 * x2 + x_05        << ", ";
        os <<  x3_05 - 0.5 * x2               << ",\n";
    }
    os << "};\n\n";
}
