// Copyright Â© 2021 Brad Howes. All rights reserved.

#include <iostream>
#include <iomanip>

#include "DSP.hpp"
#include "DSPGenerators.hpp"
#include "MIDI/ValueTransformer.hpp"

using namespace SF2::DSP;
using namespace SF2::DSP::Tables;
using namespace SF2::MIDI;

void
Generators::Generate(std::ostream& os) {
    os << std::fixed;
    os << std::setprecision(16); // should be OK for 64-bit doubles
    os << std::showpoint;

    os << "// This file is auto-generated by the DSPGenerators program\n";
    os << "// See the DSPGenerators/DSPGenerators.cc file\n\n";
    os << "#include \"DSP.hpp\"\n";
    os << "#include \"MIDI/ValueTransformer.hpp\"\n\n";
    os << "using namespace SF2::DSP;\n";
    os << "using namespace SF2::DSP::Tables;\n";
    os << "using namespace SF2::MIDI;\n\n";

    os << "const std::array<double, PanLookup::TableSize> PanLookup::lookup_ = {\n";
    for (auto index = 0; index < PanLookup::TableSize; ++index) {
        os << PanLookup::value(index) << ",\n";
    }
    os << "};\n\n";

    os << "const std::array<double, SineLookup::TableSize> SineLookup::lookup_ = {\n";
    for (auto index = 0; index < SineLookup::TableSize; ++index) {
        os << SineLookup::value(index) << ",\n";
    }
    os << "};\n\n";

    os << "const std::array<double, CentsFrequencyLookup::TableSize> CentsFrequencyLookup::lookup_ = {\n";
    for (auto index = 0; index < CentsFrequencyLookup::TableSize; ++index) {
        os << CentsFrequencyLookup::value(index) << ",\n";
    }
    os << "};\n\n";

    os << "const std::array<double, CentsPartialLookup::MaxCentsValue> CentsPartialLookup::lookup_ = {\n";
    for (auto index = 0; index < CentsPartialLookup::TableSize; ++index) {
        os << CentsPartialLookup::value(index) << ",\n";
    }
    os << "};\n\n";

    os << "const std::array<double, AttenuationLookup::TableSize> AttenuationLookup::lookup_ = {\n";
    for (auto index = 0; index < AttenuationLookup::TableSize; ++index) {
        os << AttenuationLookup::value(index) << ",\n";
    }
    os << "};\n\n";

    os << "const std::array<double, GainLookup::TableSize> GainLookup::lookup_ = {\n";
    for (auto index = 0; index < GainLookup::TableSize; ++index) {
        os << GainLookup::value(index) << ",\n";
    }
    os << "};\n\n";

    os << "const Tables::Cubic4thOrder::WeightsArray Tables::Cubic4thOrder::weights_ = {\n";
    for (auto index = 0; index < Tables::Cubic4thOrder::TableSize; ++index) {
        auto x = double(index) / double(Tables::Cubic4thOrder::TableSize);
        auto x_05 = 0.5 * x;
        auto x2 = x * x;
        auto x3 = x2 * x;
        auto x3_05 = 0.5 * x3;
        auto x3_15 = 1.5 * x3;
        os << -x3_05 +       x2 - x_05        << ", ";
        os <<  x3_15 - 2.5 * x2         + 1.0 << ", ";
        os << -x3_15 + 2.0 * x2 + x_05        << ", ";
        os <<  x3_05 - 0.5 * x2               << ",\n";
    }
    os << "};\n\n";

    // --- ValueTransformer tables ---

    // unipolar ranges

    size_t size = ValueTransformer::TableSize;
    os << "const ValueTransformer::TransformArrayType ValueTransformer::positiveLinear_ = {\n";
    for (auto index = 0; index < size; ++index) {
        os << ValueTransformer::positiveLinear(index) << ",\n";
    }
    os << "};\n\n";

    os << "const ValueTransformer::TransformArrayType ValueTransformer::negativeLinear_ = {\n";
    for (auto index = 0; index < size; ++index) {
        os << ValueTransformer::negativeLinear(index) << ",\n";
    }
    os << "};\n\n";

    os << "const ValueTransformer::TransformArrayType ValueTransformer::positiveConcave_ = {\n";
    for (auto index = 0; index < size; ++index) {
        os << ValueTransformer::positiveConcave(index) << ",\n";
    }
    os << "};\n\n";

    os << "const ValueTransformer::TransformArrayType ValueTransformer::negativeConcave_ = {\n";
    for (auto index = 0; index < size; ++index) {
        os << ValueTransformer::negativeConcave(index) << ",\n";
    }
    os << "};\n\n";

    os << "const ValueTransformer::TransformArrayType ValueTransformer::positiveConvex_ = {\n";
    for (auto index = 0; index < size; ++index) {
        os << ValueTransformer::positiveConvex(index) << ",\n";
    }
    os << "};\n\n";

    os << "const ValueTransformer::TransformArrayType ValueTransformer::negativeConvex_ = {\n";
    for (auto index = 0; index < size; ++index) {
        os << ValueTransformer::negativeConvex(index) << ",\n";
    }
    os << "};\n\n";

    os << "const ValueTransformer::TransformArrayType ValueTransformer::positiveSwitched_ = {\n";
    for (auto index = 0; index < size; ++index) {
        os << ValueTransformer::positiveSwitched(index) << ",\n";
    }
    os << "};\n\n";

    os << "const ValueTransformer::TransformArrayType ValueTransformer::negativeSwitched_ = {\n";
    for (auto index = 0; index < size; ++index) {
        os << ValueTransformer::negativeSwitched(index) << ",\n";
    }
    os << "};\n\n";

    // bipolar ranges

    os << "const ValueTransformer::TransformArrayType ValueTransformer::positiveLinearBipolar_ = {\n";
    for (auto index = 0; index < size; ++index) {
        os << unipolarToBipolar(ValueTransformer::positiveLinear(index)) << ",\n";
    }
    os << "};\n\n";

    os << "const ValueTransformer::TransformArrayType ValueTransformer::negativeLinearBipolar_ = {\n";
    for (auto index = 0; index < size; ++index) {
        os << unipolarToBipolar(ValueTransformer::negativeLinear(index)) << ",\n";
    }
    os << "};\n\n";

    os << "const ValueTransformer::TransformArrayType ValueTransformer::positiveConcaveBipolar_ = {\n";
    for (auto index = 0; index < size; ++index) {
        os << unipolarToBipolar(ValueTransformer::positiveConcave(index)) << ",\n";
    }
    os << "};\n\n";

    os << "const ValueTransformer::TransformArrayType ValueTransformer::negativeConcaveBipolar_ = {\n";
    for (auto index = 0; index < size; ++index) {
        os << unipolarToBipolar(ValueTransformer::negativeConcave(index)) << ",\n";
    }
    os << "};\n\n";

    os << "const ValueTransformer::TransformArrayType ValueTransformer::positiveConvexBipolar_ = {\n";
    for (auto index = 0; index < size; ++index) {
        os << unipolarToBipolar(ValueTransformer::positiveConvex(index)) << ",\n";
    }
    os << "};\n\n";

    os << "const ValueTransformer::TransformArrayType ValueTransformer::negativeConvexBipolar_ = {\n";
    for (auto index = 0; index < size; ++index) {
        os << unipolarToBipolar(ValueTransformer::negativeConvex(index)) << ",\n";
    }
    os << "};\n\n";

    os << "const ValueTransformer::TransformArrayType ValueTransformer::positiveSwitchedBipolar_ = {\n";
    for (auto index = 0; index < size; ++index) {
        os << unipolarToBipolar(ValueTransformer::positiveSwitched(index)) << ",\n";
    }
    os << "};\n\n";

    os << "const ValueTransformer::TransformArrayType ValueTransformer::negativeSwitchedBipolar_ = {\n";
    for (auto index = 0; index < size; ++index) {
        os << unipolarToBipolar(ValueTransformer::negativeSwitched(index)) << ",\n";
    }
    os << "};\n\n";
}
