// Copyright Â© 2021 Brad Howes. All rights reserved.

#include <iostream>
#include <iomanip>

#include "DSP/DSP.hpp"
#include "MIDI/ValueTransformer.hpp"
#include "DSPGenerators.hpp"

using namespace SF2::DSP;
using namespace SF2::DSP::Tables;
using namespace SF2::MIDI;

Generator::Generator(std::ostream& os) : os_{os}
{
    os_ << std::fixed;
    os_ << std::setprecision(16); // should be OK for 64-bit doubles
    os_ << std::showpoint;

    os_ << "// This file is auto-generated by the DSPGenerators program\n";
    os_ << "// See the DSPGenerators/DSPGenerators.cc file\n\n";
    os_ << "#include \"DSP/DSP.hpp\"\n";
    os_ << "#include \"MIDI/ValueTransformer.hpp\"\n\n";
    os_ << "using namespace SF2::DSP;\n";
    os_ << "using namespace SF2::DSP::Tables;\n";
    os_ << "using namespace SF2::MIDI;\n\n";

    // Lookup tables
    generate<PanLookup>("PanLookup");
    generate<SineLookup>("SineLookup");
    generate<CentsFrequencyLookup>("CentsFrequencyLookup");
    generate<CentsPartialLookup>("CentsPartialLookup");
    generate<AttenuationLookup>("AttenuationLookup");
    generate<GainLookup>("GainLookup");

    // Unipolar transforms
    generateTransform(ValueTransformer::positiveLinear, "positiveLinear", false);
    generateTransform(ValueTransformer::negativeLinear, "negativeLinear", false);
    generateTransform(ValueTransformer::positiveConcave, "positiveConcave", false);
    generateTransform(ValueTransformer::negativeConcave, "negativeConcave", false);
    generateTransform(ValueTransformer::positiveConvex, "positiveConvex", false);
    generateTransform(ValueTransformer::negativeConvex, "negativeConvex", false);
    generateTransform(ValueTransformer::positiveSwitched, "positiveSwitched", false);
    generateTransform(ValueTransformer::negativeSwitched, "negativeSwitched", false);

    // Bipolar transforms
    generateTransform(ValueTransformer::positiveLinear, "positiveLinear", true);
    generateTransform(ValueTransformer::negativeLinear, "negativeLinear", true);
    generateTransform(ValueTransformer::positiveConcave, "positiveConcave", true);
    generateTransform(ValueTransformer::negativeConcave, "negativeConcave", true);
    generateTransform(ValueTransformer::positiveConvex, "positiveConvex", true);
    generateTransform(ValueTransformer::negativeConvex, "negativeConvex", true);
    generateTransform(ValueTransformer::positiveSwitched, "positiveSwitched", true);
    generateTransform(ValueTransformer::negativeSwitched, "negativeSwitched", true);

    // Cubic4thOrder weights table
    generateCubic4thOrderWeights();
}
