#!/bin/bash

exec 2> ${HOME}/bumpVersions.log

let MAJOR=0
let MINOR=0
let PATCH=0

function log #
{
    >&2 echo "-- ${@}"
}

function error #
{
    >&2 echo "** ${@}"
    help
    exit 1
}

function bumpMajor
{
    let MAJOR+=1
    let MINOR=0
    let PATCH=0
}

function bumpMinor
{
    let MINOR+=1
    let PATCH=0
}

function bumpPatch
{
    let PATCH+=1
}

MARKETING_VERSION=""
function forceVersion
{
    IFS="." eval 'P=(${1})'
    let MAJOR=${P[0]}
    let MINOR=${P[1]}
    let PATCH=${P[2]}
}

PROC=exit

function help # MSG
{
    cat << EOT
usage: bumpVersions [-d DIR] [-1][-2][-3][-b][-s ARG]

Increment one of the numbers in the MAJOR.MINOR.PATCH MARKETING_VERSION
and set a new PROJECT_VERSION based on current date/time. By default this
will affect *all* *.xcodeproj projects in the current directory. To restrict
to one or more, provide the *.xcodeproj path(s) as arguments.

-1: increment the first (MAJOR) value and zero the rest
-2: increment the second (MINOR) valuie and zero the rest
-3: increment the third (PATCH) value
-b: only update the PROJECT_VERSION value
-s: set the version to ARG
-d: use DIR as working directory
-h: show this text
-v: show current versions
EOT
}

function validate_marketing_version
{
    local INITED=""

    for PROJECT in "${@}"; do
        FILE="${PROJECT}/project.pbxproj"
        set -- $(awk '/MARKETING_VERSION =/ { z=split($3, B, "[.;]"); print B[1], B[2], B[3]; }' "${FILE}")
        while [[ $# > 0 ]]; do
            if [[ -z "${INIT}" ]]; then
                let MAJOR=${1}
                let MINOR=${2}
                let PATCH=${3:-0}
                INITED="y"
            elif [[ "${1}.${2}.${3}" != "${MAJOR}.${MINOR}.${PATCH}" ]]; then
                error "version mismatch - '${1}.${2}.${3}' '${MAJOR}.${MINOR}.${PATCH}'"
            fi
            shift 3
        done
    done
}

function tag
{
    log tagging with ${MARKETING_VERSION}
    git tag ${MARKETING_VERSION}
    exit 0
}

function show
{
    echo "${MARKETING_VERSION}"
    exit 0
}

while [[ "${1}" != "${1#-}" ]]; do
    case "${1}" in
        -d) cd "${2}"; shift 1;;
        -1) PROC=bumpMajor ;;
        -2) PROC=bumpMinor ;;
        -3) PROC=bumpPatch ;;
        -b) PROC=: ;;
        -D) log "Removed DerivedData folder."; exit 0 ;;
        -h) help; exit 0 ;;
        -s) PROC="forceVersion ${2}"; shift 2; ;;
        -t) PROC=tag ;;
	-v) PROC=show ;;
        *) error "invalid option - ${1}"
    esac
    shift 1
done

if [[ -z "${MARKETING_VERSION}" ]]; then
    PROJECTS=$(find . -name '*.xcodeproj')
    [[ -z "${PROJECTS}" ]] && error no projects found to modify
    validate_marketing_version ${PROJECTS}
    MARKETING_VERSION="${MAJOR}.${MINOR}.${PATCH}"
    log current version: "${MARKETING_VERSION}"
fi

eval ${PROC}

if [[ "${PROC}" != ":" ]]; then
    MARKETING_VERSION="${MAJOR}.${MINOR}.${PATCH}"
fi

log new version: ${MARKETING_VERSION}
PROJECT_VERSION="$(date '+%Y%m%d%H%M%S')"
log new project version: ${PROJECT_VERSION}

for FILE in $(find . -name '*.pbxproj'); do
    log updating ${FILE}
    sed -e "/MARKETING_VERSION = /s/= [0-9.]*;/= ${MARKETING_VERSION};/g" \
        -e "/CURRENT_PROJECT_VERSION = /s/= [0-9]*;/= ${PROJECT_VERSION};/g" \
        -i ".old" "${FILE}"
done

DISPLAY_VERSION="v${MARKETING_VERSION}"

for FILE in $(find . -name '*.storyboard' -o -name '*.xib'); do
    log updating ${FILE}
    sed -e "/userLabel=\"APP_VERSION\"/s/ text=\"[^\"]*\"/ text=\"${DISPLAY_VERSION}\"/" \
        -e "/userLabel=\"APP_VERSION\"/s/ title=\"[^\"]*\"/ title=\"${DISPLAY_VERSION}\"/" \
        -i ".old" "${FILE}"
done

HEX_VERSION=$(printf "%d%02d%02d" ${MAJOR} ${MINOR} ${PATCH})
log HEX_VERSION ${HEX_VERSION}
DEC_VERSION=$((0x${HEX_VERSION}))
log DEC_VERSION ${DEC_VERSION}

for FILE in $(find . -name 'Info.plist'); do
    [[ "${FILE#./DerivedData}" != "${FILE}" ]] && continue
    if [[ -f "${FILE}" ]]; then
        log "checking ${FILE}"
        PlistBuddy \
            "${FILE}" \
            -c "Set :NSExtension:NSExtensionAttributes:AudioComponents:0:version ${DEC_VERSION}" \
            && log "updated ${FILE} with ${DEC_VERSION} (${HEX_VERSION})"
    fi
done

log done
log ${MARKETING_VERSION} ${DISPLAY_VERSION} ${PROJECT_VERSION}

exit 0
