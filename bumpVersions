#!/usr/bin/env python3

import argparse
import os
import re
import sys
from datetime import datetime
import subprocess

def bumpMajor(marketingVersion):
    return [marketingVersion[0] + 1, 0, 0]

def bummpMinor(marketingVersion):
    return [marketingVersion[0], marketingVersion[1] + 1, 0]

def bumpPatch(marketingVersion):
    return [marketingVersion[0], marketingVersion[1], marketingVersion[2] + 1]

def getVersionString(marketingVersion):
    return f'{marketingVersion[0]}.{marketingVersion[1]}.{marketingVersion[2]}'

def getComponentVersion(marketingVersion):
    return int(f'0x{marketingVersion[0]:02}{marketingVersion[1]:02}{marketingVersion[2]:02}', 16)

def error(*args):
    print('**', *args)
    sys.exit(1)

def log(*args):
    print('--', *args)

def locateFiles(cond):
    found = []
    for dirname, dirnames, filenames in os.walk('.'):
        if 'DerivedData' in dirnames:
            dirnames.remove('DerivedData')
        for name in filenames:
            path = os.path.join(dirname, name)
            if cond(name, path):
                found.append(path)
    return found

def locateProjectFiles():
    def cond(name, path):
        return name == 'project.pbxproj'
    return locateFiles(cond)

def getCurrentMarketingVersion(projectFiles):
    pattern = re.compile(r'MARKETING_VERSION = ([0-9]+)\.([0-9]+)\.([0-9]+)')
    version = None
    for project in projectFiles:
        contents = open(project, 'r').read()
        versions = pattern.findall(contents)
        if version is None:
            version = versions[0]
            versions = versions[1:]
        for v in versions:
            if v != version:
                error('version mismatch -', v, version)
    return list(map(int, version))

def getNewProjectVersion():
    return datetime.utcnow().strftime('%Y%m%d%H%M%S')

def updateProjectFiles(projectFiles, marketingVersion, projectVersion):
    marketingVersion = getVersionString(marketingVersion)
    for file in projectFiles:
        log(f"modifying project '{file}'")
        contents = open(file, 'r').read()
        contents = re.sub(r'(MARKETING_VERSION =) ([0-9]+\.[0-9]+\.[0-9]+);',
                          r'\1 ' + marketingVersion + ';',
                          contents)
        contents = re.sub(r'(CURRENT_PROJECT_VERSION =) ([0-9]*);',
                          r'\1 ' + projectVersion + ';',
                          contents)
        open(file, 'w').write(contents)

def locateUIFiles():
    def cond(name, path):
        return os.path.splitext(name)[-1] in ['.storyboard', '.xib'] and path.find('/.build/') == -1
    return locateFiles(cond)

def updateUIFiles(uiFiles, marketingVersion):
    displayVersion = 'v' + getVersionString(marketingVersion)
    for file in uiFiles:
        log(f"modifying UI file '{file}'")
        contents = open(file, 'r').read()
        contents = re.sub(r'(<label .* (text|title)=)("[^"]+")(.* userLabel="APP_VERSION")>',
                          r'\1"' + displayVersion + r'"\4>', contents)
        open(file, 'w').write(contents)

def runCommand(*args):
    process = subprocess.run(args, stdout=subprocess.PIPE, universal_newlines=True)
    if process.returncode != 0:
        print(process.stdout)
        print(process.stderr)
        sys.exit(1)

def locateInfoFiles():
    def cond(name, path):
        return name == 'Info.plist'
    return locateFiles(cond)

def updateInfoFiles(infoFiles, marketingVersion):
    componentVersion = getComponentVersion(marketingVersion)
    log(f"componentVersion - {componentVersion}")
    for file in infoFiles:
        if file.find('xcarchive') != -1:
            continue

        contents = open(file, 'rb').read()
        if contents.find(b'<key>NSExtension</key>') == -1:
            continue

        log(f"modifying info file '{file}'")
        runCommand('PlistBuddy',
                   file,
                   '-c',
                   f'Set :NSExtension:NSExtensionAttributes:AudioComponents:0:version {componentVersion}')

def setVersion(value):
    return list(map(int, value.split('.')))

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('-d', '--dir', help='DIR to process')
    group = parser.add_mutually_exclusive_group()
    group.add_argument('-1', '--major', action='store_true', help='bump major version')
    group.add_argument('-2', '--minor', action='store_true', help='bump minor version')
    group.add_argument('-3', '--patch', action='store_true', help='bump patch version')
    group.add_argument('-b', '--build', action='store_true', help='set the build version')
    group.add_argument('-s', '--set', help='set the version')
    args = parser.parse_args()

    if args.dir:
        log(f"working in directory '{args.dir}'")
        os.chdir(args.dir)

    projectFiles = locateProjectFiles()
    marketingVersion = getCurrentMarketingVersion(projectFiles)
    projectVersion = getNewProjectVersion()
    log(f"projectVersion - {projectVersion}")

    if args.set:
        marketingVersion = list(map(int, args.set.split('.')))
    if args.major:
        marketingVersion = bumpMajor(marketingVersion)
    if args.minor:
        marketingVersion = bumpMinor(marketingVersion)
    if args.patch:
        marketingVersion = bumpPatch(marketingVersion)
    log(f"marketingVersion - {getVersionString(marketingVersion)}")

    updateProjectFiles(projectFiles, marketingVersion, projectVersion)
    updateUIFiles(locateUIFiles(), marketingVersion)
    updateInfoFiles(locateInfoFiles(), marketingVersion)

    open(".version", "w").write(getVersionString(marketingVersion) + '\n')

if __name__ == '__main__':
    main()
